:py:mod:`cneuromax.fitting.neuroevolution`
==========================================

.. py:module:: cneuromax.fitting.neuroevolution

.. autoapi-nested-parse::

   Fitting with Neuroevolution (+ :mod:`hydra-core` config storing).



Subpackages
-----------
.. toctree::
   :titlesonly:
   :maxdepth: 3

   agent/index.rst
   space/index.rst
   utils/index.rst


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   __main__/index.rst
   config/index.rst
   fit/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   cneuromax.fitting.neuroevolution.NeuroevolutionFittingHydraConfig



Functions
~~~~~~~~~

.. autoapisummary::

   cneuromax.fitting.neuroevolution.store_task_configs
   cneuromax.fitting.neuroevolution.store_base_fitting_configs
   cneuromax.fitting.neuroevolution.store_neuroevolution_fitting_configs



.. py:function:: store_task_configs(cs: hydra.core.config_store.ConfigStore) -> None

   Stores :mod:`hydra-core` task configurations.

   Parses the task config path from the script arguments, import
   its ``store_configs`` function if it exists, and calls it.

   :param cs: A singleton instance that manages the :mod:`hydra-core`            configuration store.

   :raises ModuleNotFoundError: If the task module cannot be found.
   :raises AttributeError: If the task module does not have a            ``store_configs`` function.


.. py:function:: store_base_fitting_configs(cs: hydra.core.config_store.ConfigStore) -> None

   Stores :mod:`hydra-core` fitting configs.

   :param cs: See :paramref:`~cneuromax.__init__.store_task_configs.cs`.


.. py:class:: NeuroevolutionFittingHydraConfig




   .

   :param space: Implicit (generated by :mod:`hydra-zen`)            `SpaceHydraConfig` instance.
   :param agent: Implicit (generated by :mod:`hydra-zen`)            `AgentHydraConfig` instance.
   :param wandb_entity: :mod:`wandb` entity (username or team name)            to use for logging. `None` means no logging.
   :param agents_per_task: Number of agents per task (`num_tasks` =            `num_nodes` x `tasks_per_node`).
   :param prev_num_gens: Number of generations from a previous experiment            to load.
   :param total_num_gens: Number of generations to run the experiment for            (including the previous number of generations).
   :param save_interval: Number of generations between each save point.            `0` means no save point except for the last generation.
   :param save_first_gen: Whether to save the state of the experiment            after the first generation (usually for plotting purposes).
   :param pop_merge: Whether to merge both generator and discriminator            populations into a single population. This means that each            agent will be evaluated on both its generative and            discriminative abilities.

   .. py:attribute:: space
      :type: Any

      

   .. py:attribute:: agent
      :type: Any

      

   .. py:attribute:: wandb_entity
      :type: str | None

      

   .. py:attribute:: agents_per_task
      :type: Annotated[int, ge(1)]
      :value: 1

      

   .. py:attribute:: prev_num_gens
      :type: Annotated[int, ge(0)]
      :value: 0

      

   .. py:attribute:: total_num_gens
      :type: Annotated[int, ge(1)]
      :value: 10

      

   .. py:attribute:: save_interval
      :type: Annotated[int, ge(0)]
      :value: 0

      

   .. py:attribute:: save_first_gen
      :type: bool
      :value: False

      

   .. py:attribute:: pop_merge
      :type: bool
      :value: False

      


.. py:function:: store_neuroevolution_fitting_configs() -> None

   Stores :mod:`hydra-core` Neuroevolution fitting configs.



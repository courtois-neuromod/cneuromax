:py:mod:`cneuromax.fitting.neuroevolution.utils.initialize`
===========================================================

.. py:module:: cneuromax.fitting.neuroevolution.utils.initialize

.. autoapi-nested-parse::

   Variable initialization for Neuroevolution fitting.



Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   cneuromax.fitting.neuroevolution.utils.initialize.initialize_common_variables
   cneuromax.fitting.neuroevolution.utils.initialize.initialize_gpu_comm
   cneuromax.fitting.neuroevolution.utils.initialize.initialize_agents



.. py:function:: initialize_common_variables(agents_per_task: Annotated[int, ge(1)], num_pops: Annotated[int, ge(1), le(2)]) -> tuple[Annotated[int, ge(1)], list[list[cneuromax.fitting.neuroevolution.agent.singular.BaseSingularAgent]], Annotated[int, ge(1)], cneuromax.fitting.neuroevolution.utils.type.exchange_and_mutate_info_type | None, cneuromax.fitting.neuroevolution.utils.type.exchange_and_mutate_info_batch_type, cneuromax.fitting.neuroevolution.utils.type.generation_results_type | None, cneuromax.fitting.neuroevolution.utils.type.generation_results_batch_type, Annotated[int, ge(0)] | None]

   Initializes variables common to all execution modes.

   :param agents_per_task: See            :paramref:`~.neuroevolution.config.NeuroevolutionFittingHydraConfig.agents_per_task`.
   :param num_pops: See            :meth:`~.neuroevolution.space.base.BaseSpace.num_pops`.

   :returns: Number of agents per population, computed from            :paramref:`agents_per_task` and Hydra launcher values            `nodes` and `tasks_per_node`.
             len_agents_batch: The number of agents per population            maintained by this process during a given generation.
             exchange_and_mutate_info: An array maintained only by the            primary process (secondary processes set this to            `None`) containing information for all processes on            how to exchange and mutate agents. Precisions on the 3rd            dimension: 0) The size of the agent when serialized, 1)            The position of the agent paired for with the current            agent, 2) Whether to send or receive the agent, 3) The            seed to randomize the mutation and evaluation of the            agent.
             exchange_and_mutate_info_batch: A sub-array of            :paramref:`exchange_and_mutate_info` maintained by this            process.
             generation_results: An array maintained only by the primary            process (secondary processes set this to `None`)            containing several pieces of information about the            results of a given generation. Precisions on the 3rd            dimension: 0) Agent fitness, 1) Number of environment            steps taken by the agent during the evaluation, 2) Size            of the agent when serialized.
             generation_results_batch: A sub-array of            :paramref:`generation_results` maintained by this            process.
             total_num_env_steps: The total number of environment steps            taken by all agents during the entire experiment. This            variable is maintained only by the primary process            (secondary processes set this to `None`).
   :rtype: pop_size


.. py:function:: initialize_gpu_comm() -> mpi4py.MPI.Comm

   Initializes a communicator for GPU work queueing.

   Assuming the experiment is ran with `N` MPI processes &
   `M` GPUs, this function will create `M` communicators, each
   containing `N/M` processes. Each communicator will be used to
   gather mutated agents onto one process, which will then
   evaluate them on the GPU.

   :returns: A communicator for GPU work queueing.
   :rtype: ith_gpu_comm


.. py:function:: initialize_agents(config: Any, len_agents_batch: Annotated[int, ge(1)], num_pops: Annotated[int, ge(1), le(2)], *, pop_merge: bool) -> list[list[cneuromax.fitting.neuroevolution.agent.singular.BaseSingularAgent]]

   Initializes a batch of agents.

   :param config: Implicit (generated by :mod:`hydra-zen`)            ``BaseAgentConfig`` instance that would have wrapped            :class:`~.neuroevolution.agent.base.BaseAgent`.
   :param len_agents_batch: See return value of ``len_agents_batch`` from            :func:`initialize_common_variables`.
   :param num_pops: See            :meth:`~.neuroevolution.space.base.BaseSpace.num_pops`.
   :param pop_merge: See            :paramref:`~.neuroevolution.config.NeuroevolutionFittingHydraConfig.pop_merge`.

   :returns: A 2D list of agents maintained by this process.
   :rtype: agents_batch



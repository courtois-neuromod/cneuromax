""":mod:`hydra-core` deep learning fitting config & validation."""

from dataclasses import dataclass
from typing import Any

from omegaconf import MISSING, DictConfig

from cneuromax.fitting import BaseFittingHydraConfig
from cneuromax.fitting.config import verify_fitting_config


@dataclass
class DeepLearningFittingHydraConfig(BaseFittingHydraConfig):
    """Structured :mod:`hydra-core` config for Deep Learning fitting.

    Args:
        trainer: Implicit (generated by :mod:`hydra-zen`)\
            `TrainerHydraConfig` instance that would have wrapped\
            :class:`lightning.pytorch.Trainer`.
        litmodule: Implicit (generated by :mod:`hydra-zen`)\
            `LitModuleHydraConfig` instance that would have wrapped\
            :class:`cneuromax.fitting.deeplearning.litmodule.BaseLitModule`.
        datamodule: Implicit (generated by :mod:`hydra-zen`)\
            `DataModuleHydraConfig` instance that would have wrapped\
            :class:`cneuromax.fitting.deeplearning.datamodule.BaseDataModule`.
        logger: Implicit (generated by :mod:`hydra-zen`)\
            `LoggerHydraConfig` instance that would have wrapped\
            :class:`lightning.pytorch.loggers.Logger`.
    """

    trainer: Any = MISSING
    litmodule: Any = MISSING
    datamodule: Any = MISSING
    logger: Any = MISSING


def verify_deep_learning_fitting_config(config: DictConfig) -> None:
    """Verifies that various config elements are set correctly.

    Args:
        config: See\
            :paramref:`cneromax.fitting.config.verify_fitting_config.config`.
    """
    verify_fitting_config(config)
